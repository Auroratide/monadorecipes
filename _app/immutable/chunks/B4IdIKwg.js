function j(){}const F=t=>t;function E(t,n){for(const e in n)t[e]=n[e];return t}function q(t){return t()}function P(){return Object.create(null)}function v(t){t.forEach(q)}function O(t){return typeof t=="function"}function S(t,n){return t!=t?n==n:t!==n||t&&typeof t=="object"||typeof t=="function"}let f;function y(t,n){return t===n?!0:(f||(f=document.createElement("a")),f.href=n,t===f.href)}function m(t){return t.split(",").map(n=>n.trim().split(" ").filter(Boolean))}function U(t,n){const e=m(t.srcset),r=m(n||"");return r.length===e.length&&r.every(([o,s],c)=>s===e[c][1]&&(y(e[c][0],o)||y(o,e[c][0])))}function C(t){return Object.keys(t).length===0}function D(t,n,e,r){if(t){const o=k(t,n,e,r);return t[0](o)}}function k(t,n,e,r){return t[1]&&r?E(e.ctx.slice(),t[1](r(n))):e.ctx}function G(t,n,e,r){if(t[2]&&r){const o=t[2](r(e));if(n.dirty===void 0)return o;if(typeof o=="object"){const s=[],c=Math.max(n.dirty.length,o.length);for(let a=0;a<c;a+=1)s[a]=n.dirty[a]|o[a];return s}return n.dirty|o}return n.dirty}function H(t,n,e,r,o,s){if(o){const c=k(n,e,r,s);t.p(c,o)}}function I(t){if(t.ctx.length>32){const n=[],e=t.ctx.length/32;for(let r=0;r<e;r++)n[r]=-1;return n}return-1}function J(t){return t??""}function K(t){return t&&O(t.destroy)?t.destroy:j}let _;function h(t){_=t}function x(){if(!_)throw new Error("Function called outside component initialization");return _}function L(t){x().$$.on_mount.push(t)}function N(t){x().$$.after_update.push(t)}const i=[],b=[];let l=[];const p=[],w=Promise.resolve();let g=!1;function z(){g||(g=!0,w.then(M))}function Q(){return z(),w}function B(t){l.push(t)}function R(t){p.push(t)}const d=new Set;let u=0;function M(){if(u!==0)return;const t=_;do{try{for(;u<i.length;){const n=i[u];u++,h(n),A(n.$$)}}catch(n){throw i.length=0,u=0,n}for(h(null),i.length=0,u=0;b.length;)b.pop()();for(let n=0;n<l.length;n+=1){const e=l[n];d.has(e)||(d.add(e),e())}l.length=0}while(i.length);for(;p.length;)p.pop()();g=!1,d.clear(),h(t)}function A(t){if(t.fragment!==null){t.update(),v(t.before_update);const n=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,n),t.after_update.forEach(B)}}function T(t){const n=[],e=[];l.forEach(r=>t.indexOf(r)===-1?n.push(r):e.push(r)),e.forEach(r=>r()),l=n}export{K as A,R as B,G as a,N as b,D as c,b as d,J as e,y as f,I as g,U as h,O as i,F as j,B as k,C as l,_ as m,j as n,L as o,P as p,M as q,v as r,S as s,Q as t,H as u,h as v,T as w,q as x,i as y,z};
